#!/bin/bash

# Setup script for the yantranet platform's digital signage module
# on the linux platform
#
# Copyright (c) 2013, Eric Young. All rights reserved.
#

# Variables
               profileID=27 #This will be the new ID to use!  
               configDir='/etc/'
                agentDir='/opt/yantranet/agent/'
                 homeDir='/home/yantrauser/'
                   rcDir='rc2.d/'
        simpleGatewayDir='/opt/SimpleGatewayService/'
               hostsFile='hosts'
             agentDBFile='Agent.db'
            hostnameFile='hostname'
          installXMLFile='install.xml'
simpleGatewayServiceFile='serviceconfig.xml'
           autoStartFile='.config/autostart/AppMonitor.desktop'
       installSourceFile='YantraNetInstallers/install.xml'
           installBackup='install.xml.bak'
             ynsetupConf='ynsetup.conf'
       ynsetupConfBackup='ynsetup.conf.bak'
                  boldOn='\033[1m'
                 boldOff='\033[0m'

######### Functions ##########

escapeParametersBatch() {
#  local myVars=( username newname description address1 address2 city state postal country )
  local myVars=( username newname description )
  for (( i=0 ; i<"${#myVars[@]}" ; i++ ))
  do
    local theOne
    eval theOne=\$${myVars[$i]}
    theOne=`echo "$theOne" | sed 's/ /%20/g'`
    eval "${myVars[$i]}=\"$theOne\""
  done
} # end escapeParametersBatch()

escapeParametersSingle() {
  local hold=$1
  hold=`echo "$hold" | sed 's/ /%20/g'`
  echo "$hold"
} # end escapeParamatersSingle()

copySrcInstall() {
  if [[ -e "$homeDir$installSourceFile" ]]
  then
    echo "Found original $installXMLFile in $homeDir"". Copying now..."
    cp -v $homeDir$installSourceFile $agentDir$installXMLFile
    chown root.root $agentDir$installXMLFile
    chmod 644 $agentDir$installXMLFile
  else
    echo "Ummm, we're gonna need to find an $installXMLFile somewhere fast!"
    echo $agentDir$installXMLFile $homeDir$installSourceFile
    exit 99
  fi
} # end copySrcInstall()

stopMonitor() {
  /etc/init.d/yantranet_agentMonitor.sh stop
} # end stopMonitor()
  
stopAgent() {
  /etc/init.d/yantranet_agent.sh stop
} # end stopAgent

stopAppMonitor() {
  killall -q AppMonitor
} # end stopAppMonitor()

stopWebApp() {
  killall -q WebApp
} # end stopWebApp

versionInfo() {
  echo ""
  echo "         Name: $0"
  echo "      Version: 1.1.0"
  echo "       Author: Eric Young (eyoung@everwell.com)"
  echo "      Written: Nov. 10, 2012"
  echo " Last Updated: Nov. 29, 2012"
  cat <<__EOF__
Changelog: 
  v.6:
    Changed the stopMonitor and stopAgent functions to call the /etc/init.d/...
    link targets with the stop argument, instead of killall
  v.7:
    Fixed the stop* functions in their call order and dependancies to allow time
    for them to stop and clear before calling the next or dependant function
  v1.0:
    With the introduction of batched device creation from the server side, the
    functionality of the script dramatically changed. Nothing was required for
    device creation but the username, password, and hostname because the device
    already existed on the server and the whole function of this script is to
    now check in and verify its identity and slurp down the already created 
    license key and check in. Many functions are no longer called and the whole
    process is now very simple and fast.
__EOF__
} # end versionInfo()

# Test for su priv's
whoaminow() {
  if [ $(id -u) != "0" ] ; then
    echo "You must have superuser privileges to run this application"
    echo ""
	  exit 99
  fi
} # end whoaminow()

helpBlurb() {
  cat <<__EOF__
  
Usage is: sudo $0 [-c|--create|-p|--prep|-h|--help|-v|--version]

Can be used to setup a YantraNet digital-signage device for deployment
into the field, or for preparing an image by removing all licensing and
stopping all YantraNet related startup applications and services.

      -c, --create   Prepares a device for field deployment.

      -p, --prep     Removes all specific information and services in
                     preparation for capturing an image of the device for
                     use in Clonezilla or other similar environment.

      -h, --help     Display this help and exit.

      -v, --version  Show version information and exit.

__EOF__
} # end helpBlurb()

help() {
  # help is passed one argument: a 1 or a 2
  # 1 means to print help and continue where you left off.
  # 2 means to print help and exit
  if [ -z $1 ] ; then
    helpBlurb
    exit 1
  else
    case $1 in
      1 )
        helpBlurb
        break
      ;;
      2 | * )
        helpBlurb
        exit 0
    esac
  fi
} # end help()  

lcase() { 
  echo $1 | tr '[:upper:]' '[:lower:]' 
}

ucase() { 
  echo $1 | tr '[:lower:]' '[:upper:]'
}

checkHostName() {
  newname=$(echo "$1" | sed "s/^\W*\(\w+\)\W*$/\1/i1")
} # end checkHostName()

setMode() {
  echo ""
} # end setMode()

intro() {
  clear
  cat <<__EOF__

YantraNet Digital-Signage module setup
======================================
You need to provide the following:
   1) YantraNet username
   2) YantraNet password
   3) Device information
     a) Name for this media player (unique across signage network)
     b) Description of device, e.g. "Breakroom player" or "Main St"

You will be able to review and edit your entries before any changes are made
to the filesystem or the network

Bracketed entries like this, e.g. [S-398-032], represent existing values. By
pressing Enter at that prompt, you are essentially entering whatever value
was in the brackets.

Bracketed entries like this, e.g. [y/n], represent a choice to be made.
Any choices in uppercase, eg. [Y/n], means simply pressing Enter, will result
in a "Y" (Yes) response. [y/N] would mean that a "N" (No) would be entered by
default.
  
__EOF__

} # end intro()

confirmConfirm() {
  local choice
  local prompt="Are you sure?? [yes/n] >"
  echo -n $prompt
  read choice
  while :
  do
    case $choice in
      yes | YES | Yes )
        break
      ;;
      n | N )
        echo ""
        echo "Goodbye!"
        exit 0
      ;;
      * )
        echo -n $prompt
        read choice
    esac
  done
} # end confirmConfirm()

startConfirm() {
  local choice
  local prompt="Are you ready to proceed? [Y/n] >"
  echo -n $prompt
  read choice
  while [ true ]
  do
    case $choice in
      y | Y | "" )
        clear
        break
      ;;
      n | N )
        echo ""
        echo "Goodbye!"
        exit 0
      ;;
      * ) 
        echo -n $prompt
        read choice
    esac
  done
} # end startConfirm()

unameAsk() {
  local prompt="Enter your YantraNet account username"
  if [[ ! -z "$username" ]]
  then
    read -e -i $username -p "$prompt [$username]> "
    case $REPLY in
      "" | $username )
        echo "  Your username will remain unchanged: $username"
        echo ""
        editParams
        break
      ;;
      * )
        username=$REPLY
        echo "  Your username will now be: $username"
        echo ""
        editParams
        break
    esac
  else
    echo -n "$prompt >"
    read username
    while [ true ]
    do
      case $username in
        "" )
          echo -n "$prompt >"
          read username
          continue
        ;;
        * )
          echo "  Your username has now been changed to: $username"
          echo ""
          break
      esac
    done
  fi
} # end unameAsk()

passwordAsk() {
  echo ""
  local prompt="Enter your YantraNet account password"
  echo -n "$prompt >"
  pchoice=""
  read -s pchoice
  while :
  do
    case $pchoice in
      "" )
        echo ""
        echo -n "$prompt >"
        read -s
        continue
      ;;
      * )
        echo ""
        echo -n "Re-enter your password to confirm it > "
        passwordConfirm "$pchoice"
        if [[ "$pchoice" == "$pcChoice" ]]
        then
          password="$pchoice"
          echo ""
          echo "  Your password has now been set."
          echo ""
          break
        else
          echo ""
          echo "The two entries did NOT match"
          password=""
          passwordAsk
        fi
        break
    esac
  done
} # end passwordAsk()

passwordConfirm() {
  pcChoice=""
  read -s pcChoice
  case $pcChoice in
    "$pchoice" )
      return 0
    ;;
    * )
      password=""
  esac
} # end passwordConfirm()

hostnameAsk() {
  echo ""
  local destination

  if [[ ! -z "$1" ]] ; then
    destination=$1
  fi
  
  # Get the current hostname
  devname=`hostname`
  local prompt="What would you like to call this media player? [$devname] >"
  if [[ ! -z "$newname" ]]
  then
    read -e -i "$newname" -p "$prompt " newname
  else
    read -e -p "$prompt " newname
  fi

  if [[ ! -z "$newname" ]]
  then # If anything was entered at all
    newname=$(ucase $newname) # Make it all uppercase
    checkHostName "$newname"
  fi

  case $newname in
    "$devname" | "" ) ### No change was made or the same name was typed in
      newname=$(ucase $devname)
      echo "  Device will remain $devname"
      echo ""
      if [ ! -z $destination ] ; then
        editParams
        break
      fi
    ;;
    * )
      echo "  The device name will be changed to $newname"
      echo ""
      if [ ! -z $destination ] ; then
        editParams
        break
      fi
  esac
} # end hostNameAsk()

recap() {
  if [[ ! -z "$1" ]] && [[ "$1"="c" ]]
  then
    clear
  fi
  
  if [[ -z "$password" ]]
  then
    local passDisplay="$boldOn""EMPTY! Please Provide!""$boldOff"
  else
    local passDisplay="$boldOn""hidden password""$boldOff"
  fi
    recap=`cat <<__EOF__
Parameter Review:
  User Information
      $username/[$passDisplay]
  Device Information
      Name: $newname

__EOF__`
  fi
  echo -e "$recap"
} # end of recap()  

review() {
  local choice
  recap c
  echo ""
  echo "You will be prompted for your password if it is not set."
  echo -n "Are you satisfied with these parameters? [y/n] > "
  read choice
  
  while :
  do
    case $choice in
      y | Y )
        if [[ -z "$password" ]]
        then
          passwordAsk
          continue
        fi
        escapeParametersBatch
        process_files "wget -q -O response.xml \
        --post-data=username=$username&password=$password&profile_id=$profileID&host_name=$newname \
        http://api.yantranet.com/ynt/app/v0.2/system/license_manager/create"
        break
      ;;
      n | N )
        echo "I am unsatisfied and I have a curve!"
        editParams
        break
      ;;
      * )
        echo ""
        echo "You will be prompted for your password if it is not set."
        echo -n "Are you satisfied with these parameters? [y/n] >"
        read choice
        continue
    esac
  done
} # end review()

change_name() {
  # Accepts two possible arguments:
  #   1) $1 should be the desired hostname for the machine
  #   2) $2 is an optional parameter denoting that this function was called by
  #+     the script in -p or --prep mode and to not add the name of the device
  #+     to the SimpleGatewayServiceFile, but simply remove the name from it
  #+     entirely
  # The form is change_name $newname
  
  echo "Changing the name and related files now..."
  local nn=$1

  sed -i.bak "1 c $1" $configDir$hostnameFile
  if [[ "$?" = "0" ]]
  then
    echo "$configDir$hostnameFile has been updated"
  else
    echo "$configDir$hostnameFile has NOT been updated"
  fi

  sed -i.bak "/127.0.1.1/c 127.0.1.1 $1" $configDir$hostsFile
  if [[ "$?" = "0" ]]
  then
    echo "$configDir$hostsFile file has been updated"
  else
    echo "$configDir$hostsFile file has NOT been updated"
  fi

  if [[ ! -z "$2" ]]
  then
    sed -i.bak "/<Name>/c \\\t<Name></Name>" $simpleGatewayDir$simpleGatewayServiceFile
  else
    sed -i.bak "/<Name>/c \\\t<Name>$1</Name>" $simpleGatewayDir$simpleGatewayServiceFile
  fi
  
  if [[ "$?" = "0" ]]
  then
    echo "$simpleGatewayDir$simpleGatewayServiceFile file has been updated"
  else
    echo "$simpleGatewayDir$simpleGatewayServiceFile file has NOT been updated"
  fi

  echo ""
} # end change_name()

agentMonitorControl() {
  if [[ "$#" -lt 1 ]] 
  then
    echo "$0 was called without the required argument"
    echo "  The proper call is $0 [start/stop]"
    echo "Nothing has been done"
    return 1
   elif [[ "$1" = "start" ]]
    then
      if [[ -e $(eval echo $configDir$rcDir"K*yantranet_agentMonitor.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"S*yantranet_agentMonitor.sh") ]]
      then
        mv $(eval echo $configDir$rcDir"K99yantranet_agentMonitor.sh" $configDir$rcDir"S99yantranet_agentMonitor.sh")

        if [ "$?" = "0" ]; then
          echo "The Yantranet Agent Monitor service has been enabled"
        fi
      elif [[ -e $(eval echo $configDir$rcDir"S*yantranet_agentMonitor.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"K*yantranet_agentMonitor.sh") ]]
      then
        echo "The Yantranet Agent Monitor service has already been enabled"
        echo "We will skip that part."
        echo ""
      else
        echo "I could not find a link to the yantranet_agentMonitor beginning with S or K in $configDir$rcDir"
        echo "You should check that directory manually to see if there was a misspelling of the name"
        echo "or whether the link has been dissolved somehow, in which case you will need to"
        echo "recreate it appropriately. It is suggested that you contact your YantraNet"
        echo "representative before doing this."
      fi
  elif [[ "$1" = "stop" ]]
    then
      if [[ -e $(eval echo $configDir$rcDir"S*yantranet_agentMonitor.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"K*yantranet_agentMonitor.sh") ]]
      then
        mv $(eval echo $configDir$rcDir"S99yantranet_agentMonitor.sh" $configDir$rcDir"K99yantranet_agentMonitor.sh")

        if [ "$?" = "0" ]; then
          echo "The Yantranet Agent Monitor service has been disabled"
        fi
      elif [[ -e $(eval echo $configDir$rcDir"K*yantranet_agentMonitor.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"S*yantranet_agentMonitor.sh") ]]
      then
        echo "The Yantranet Agent Monitor service has already been disabled"
        echo "We will skip that part."
        echo ""
      else
        echo "I could not find a link to the yantranet_agentMonitor beginning with S or K in $configDir$rcDir"
        echo "You should check that directory manually to see if there was a misspelling of the name"
        echo "or whether the link has been dissolved somehow, in which case you will need to"
        echo "recreate it appropriately. It is suggested that you contact your YantraNet"
        echo "representative before doing this."
      fi
  else
    echo "I don't know what you want me to do. Please pass me either a 'start'"
    echo "or a 'stop', but not a '$1'! Nothing has been done"
  fi
} # end agentMonitorControl()

agentControl() {
  if [[ "$#" -lt 1 ]] 
  then
    echo "$0 was called without the required argument"
    echo "  The proper call is $0 [start/stop]"
    echo "Nothing has been done"
    return 1
   elif [[ "$1" = "start" ]]
    then
      if [[ -e $(eval echo $configDir$rcDir"K*yantranet_agent.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"S*yantranet_agent.sh") ]]
      then
        mv $(eval echo $configDir$rcDir"K98yantranet_agent.sh" $configDir$rcDir"S98yantranet_agent.sh")

        if [ "$?" = "0" ]; then
          echo "The Yantranet Agent service has been enabled"
        fi
      elif [[ -e $(eval echo $configDir$rcDir"S*yantranet_agent.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"K*yantranet_agent.sh") ]]
      then
        echo "The Yantranet Agent service has already been enabled"
        echo "We will skip that part."
        echo ""
      else
        echo "I could not find a link to the yantranet_agent beginning with S or K in $configDir$rcDir"
        echo "You should check that directory manually to see if there was a misspelling of the name"
        echo "or whether the link has been dissolved somehow, in which case you will need to"
        echo "recreate it appropriately. It is suggested that you contact your YantraNet"
        echo "representative before doing this."
      fi
  elif [[ "$1" = "stop" ]]
    then
      if [[ -e $(eval echo $configDir$rcDir"S*yantranet_agent.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"K*yantranet_agent.sh") ]]
      then
        mv $(eval echo $configDir$rcDir"S98yantranet_agent.sh" $configDir$rcDir"K98yantranet_agent.sh")

        if [ "$?" = "0" ]; then
          echo "The Yantranet Agent service has been disabled"
        fi
      elif [[ -e $(eval echo $configDir$rcDir"K*yantranet_agent.sh") ]] && [[ ! -e $(eval echo $configDir$rcDir"S*yantranet_agent.sh") ]]
      then
        echo "The Yantranet Agent service has already been disabled"
        echo "We will skip that part."
        echo ""
      else
        echo "I could not find a link to the yantranet_agent beginning with S or K in $configDir$rcDir"
        echo "You should check that directory manually to see if there was a misspelling of the name"
        echo "or whether the link has been dissolved somehow, in which case you will need to"
        echo "recreate it appropriately. It is suggested that you contact your YantraNet"
        echo "representative before doing this."
      fi
  else
    echo "I don't know what you want me to do. Please pass me either a 'start'"
    echo "or a 'stop', but not a '$1'! Nothing has been done"
  fi
} # end agentControl()

startupControl() {
  if [[ "$#" -lt 1 ]]
  then
    echo "$0 was called without the required argument"
    echo "  The proper call is $0 [start/stop]"
    echo "Nothing has been done"
    return 1
  elif [[ "$1" = "start" ]]
  then
    if [[ -f "$homeDir$autoStartFile" ]]
    then
      sed -i.bak "s/\(X-MATE-Autostart-enabled=\).*/\1true/" $homeDir$autoStartFile
      if [[ "$?" = "0" ]]
      then
        echo ""
        echo "The digital signage module will start automatically on startup"
      else
        echo ""
        echo "There was a problem modifying the $homeDir$autoStartFile file"
        echo "You should manually enable the WebApp from the main menu of the desktop"
      fi
    else
      echo "Can't find $homeDir$autoStartFile for writing. Sorry."
      exit 1
    fi
  elif [[ "$1" = "stop" ]]
  then
    if [[ -f "$homeDir$autoStartFile" ]]
    then
      sed -i.bak "s/\(X-MATE-Autostart-enabled=\).*/\1false/" $homeDir$autoStartFile
      if [[ "$?" = "0" ]]
      then
        echo ""
        echo "The digital signage module will NOT start automatically on startup"
      else
        echo ""
        echo "There was a problem modifying the $homeDir$autoStartFile file"
        echo "You should manually enable the WebApp from the main menu of the desktop"
      fi
    else
      echo "Can't find $homeDir$autoStartFile for writing. Sorry."
      exit 1
    fi
  else
    echo "You should pass this function either a 'start' or a 'stop' and not"
    echo "the '$1' that you did. Nothing has been done."
  fi
} # end startupControl()

process_files() {
  echo "Processing player request..."
  $1 #execute the wget command and get the response
  # First get the license key from the response.xml file and assign it to $license_key
  license_key=`grep -P -i -o -m 1 '(\w{0,8}-\w{4}-\w{4}-\w{4}-\w{0,12})' response.xml >&1`
  if [[ ! -z "$license_key" ]]
  then
    echo ""
    echo "You have received the following license key:"
    echo "$license_key"
    echo ""
  else
    echo ""
    echo "There was an error retrieving the license key from the server"
    password=""
    echo "The password is being reset. You will need to re-enter the correct one"
    sleep 9
    review
  fi

###############################################################################
# Variables (for review only)
#               profileID=22
#               configDir='/etc/'
#                agentDir='/opt/yantranet/agent/'
#                 homeDir='/home/yantrauser/'
#                   rcDir='rc2.d/'
#        simpleGatewayDir='/opt/SimpleGatewayService/'
#               hostsFile='hosts'
#             agentDBFile='Agent.db'
#            hostnameFile='hostname'
#          installXMLFile='install.xml'
#simpleGatewayServiceFile='serviceconfig.xml'
#           autoStartFile='.config/autostart/AppMonitor.desktop'
#       installSourceFile='YantraNetInstallers/install.xml'
#           installBackup='install.xml.bak'
#             ynsetupConf='ynsetup.conf'
#       ynsetupConfBackup='ynsetup.conf.bak'
#                  boldOn='\033[1m'
#                 boldOff='\033[0m'
###############################################################################

  echo "Updating the installation file"
  copySrcInstall # make sure there is an install.xml file in existence!
  if [[ -e "$agentDir$installXMLFile" ]] && [[ -f "$agentDir$installXMLFile" ]]
  then
    sed -i.bak "/<license_uuid>/c \\\t<license_uuid>$license_key</license_uuid>" $agentDir$installXMLFile >&1
    if [ "$?" = "0" ]; then
      echo ""
      echo "The license key has been updated"
      rm /home/yantrauser/bin/response.xml
      if [ "$?" = "0" ]; then
        echo "Installation files have been updated"
      fi
    else
      echo ""
      echo "There was an error processing the license key file!"
    fi
  else
    echo ""
    echo "There was no $installXMLFile file in the $agentDir directory"
    echo "All attempts to create it, re-create it, retrieve it from backup or"
    echo "from the initial installation sources has failed. This should"
    echo "DEFINITELY be investigated now!"
    exit 86
  fi
  
  echo ""
  echo "Enabling the Yantranet Agent Monitor"
  
  agentMonitorControl start
  agentControl start
  startupControl start
  change_name $newname

  local lastPrompt=`cat <<__EOF__
You need to restart the player for all the changes to take effect
Would you like to restart now?
__EOF__`
  while :
  do
    echo -n "$lastPrompt [y/n] > "
    read
    case $REPLY in
      y | Y )
        confirmConfirm
        reboot
      ;;
      n | N )
        exit 0
      ;;
      * )
        continue
    esac
  done
} # end process_files()

editParams() {
  PS3="Which one? > "
  recap c
  local choices="Username Password Hostname Review Exit Done"
  local choice
  select choice in $choices
  do
    case $choice in
      Username )
        unameAsk ;;
      Password )
        passwordAsk ;;
      Hostname )
        hostnameAsk ;;
      Review )
        editParams ;;
      Exit Setup )
        exit 0 ;;
      Done )
        review
        break
    esac
  done
} # end editParams()

###############################################################################
# End of functions for -c/-C/--create #########################################
###############################################################################


###############################################################################
# Functions for Image Preparation #############################################
###############################################################################

pIntro() {
  clear
  dte=$(date +%m-%d-%y)
  cat <<__EOF__

YantraNet Digital-Signage module image preparation
==================================================
This will prepare this player to be used in the creation of a master image.
All existing information that makes this device unique on the YantraNet platform
will be removed and the device will be renamed to "MSTR$dte"

__EOF__

} # end intro()

tidyUp() {
  if [[ -e "$agentDir$installBackup" ]]
  then
    rm -f "$agentDir$installBackup"
    if [[ "$?" = "0" ]]
    then
      echo ""
      echo "The $agentDir$installBackup file has been removed"
      echo ""
    fi
  fi
  
  if [[ -e "$agentDir$agentDBFile" ]]
  then
    rm -f "$agentDir$agentDBFile"
    if [[ "$?" = "0" ]]
    then
      echo ""
      echo "The $agentDir$agentDBFile file has been removed"
      echo ""
    fi
  fi
  
  if [[ -e "$configDir$ynsetupConfBackup"  ]]
  then
    rm -f "$configDir$ynsetupConfBackup"
    if [[ "$?" = "0" ]]
    then
      echo ""
      echo "The $configDir$ynsetupConfBackup file has been removed"
      echo ""
    fi
  fi 
  if [[ -e "$configDir$ynsetupConf" ]]
  then
    rm -f "$configDir$ynsetupConf"
    if [[ "$?" = "0" ]]
    then
      echo ""
      echo "The $configDir$ynsetupConf file has been removed"
      echo ""
    fi
  fi
} # end of tidyUp()

resetEverything() 
{
  if [[ -e "$agentDir$installBackup" ]]
  then
    rm -f "$agentDir$installBackup"
  fi
  copySrcInstall
  agentMonitorControl stop
  agentControl stop
  startupControl stop
  tidyUp
} # end resetEverything()


###############################################################################
# MAIN ########################################################################
###############################################################################

whoaminow # Need to have Admin priv's to run

# Process the options
if [[ $# -eq 0 ]] ; then # Must be run with command line args or you get help
  help
else
  mode=$1
  case $mode in
    -c | -C | --create )
      stopMonitor && stopAgent
      stopAppMonitor && sleep 1 && stopWebApp
      useConfig = 'false'
      intro
      startConfirm
      unameAsk
      passwordAsk
      hostnameAsk
      review
      exit 0
    ;;
    -p | -P | --prep )
      stopMonitor && stopAgent
      stopAppMonitor && sleep 1 && stopWebApp
      pIntro
      startConfirm
      newname="MSTR$dte"
      change_name $newname -p
      resetEverything
      hostname -F "$configDir$hostnameFile"
      exit 0
    ;;
    -h | --help )
      help 2
      exit 0
    ;;
    -v | --version )
      versionInfo
      exit 0
    ;;
    * )
      help
  esac
fi

exit 0
